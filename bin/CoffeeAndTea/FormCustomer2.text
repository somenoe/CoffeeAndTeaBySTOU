package CoffeeAndTea;

import XComponent.*;
import java.awt.Dimension;
import java.awt.event.*;
import java.sql.*;
import java.util.List;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class FormCustomer extends XFrame {

  public static void main(String[] args) {
    FormCustomer customer = new FormCustomer();
    customer.packWith(customer.page());
  }

  public FormCustomer() {
    super("ข้อมูลพื้นฐาน: ลูกค้า");
  }

  public XPanel page() {
    return panel()
      .setBorderLayout()
      .add("S", panelButton())
      .add("W", panelForm())
      .add("C", panelTable())
      .then(() -> showData(null));
  }

  private XPanel panelTable() {
    return panel()
      .setCardLayout(0, 0)
      .add(tablePanel())
      .setBorderEmpty(20, 20, 0, 20);
  }

  private XPanel panelForm() {
    XPanel panel = panel().setRow(6).add(labelTitle("ข้อมูล: ลูกค้า"));

    for (String name : tableColumnNames) {
      panel.add(detail(name));
    }

    return panel.edged(20, 20, 0, 0);
  }

  private XPanel detail(String title) {
    details.add(new JTextField(15));

    return panel().setBorderTitle(title).add(details.lastElement());
  }

  private JScrollPane tablePanel() {
    return new JScrollPane() {
      {
        table =
          new JTable(new DefaultTableModel()) {
            {
              setRowHeight(25);
              addMouseListener(
                new MouseAdapter() {
                  public void mouseClicked(MouseEvent e) {
                    int index = table.getSelectedRow();
                    details.get(0).setEditable(false);
                    for (int i = 0; i < sqlColumnId.length; i++) {
                      details
                        .get(i)
                        .setText( //
                          table.getValueAt(index, i).toString()
                        );
                    }
                  }
                }
              );
            }
          };
        setViewportView(table);
        setPreferredSize(new Dimension(850, 127));
      }
    };
  }

  private XPanel panelButton() {
    return panel()
      .setFlowLayoutRight()
      .add(searchPanel())
      .add(button("เพิ่มข้อมูล").which(this::insert))
      .add(button("แก้ไข").which(this::update))
      .add(button("ลบ").which(this::delete))
      .add(button("ยกเลิก").which(this::reset))
      .panel()
      .setCardLayout(0, 20);
  }

  private JTable table;
  private Vector<String> tableColumnNames = new Vector<>(
    List.of("เลขที่", "ชี่อ", "นามสกุล", "ที่อยู่", "หมายเลขโทรศัพท์")
  );

  private String sqlTableName = "CUSTOMER";
  private String[] sqlColumnId = {
    "CUST_NUM",
    "CUST_FNAME",
    "CUST_LNAME",
    "CUST_ADDR",
    "CUST_PHONE",
  };

  private Vector<JTextField> details = new Vector<>();
  private JTextField searchField;

  private XPanel searchPanel() {
    searchField = new JTextField(15);

    searchField.addKeyListener(
      new KeyAdapter() {
        @Override
        public void keyReleased(KeyEvent e) {
          showData(searchField.getText().trim());
        }
      }
    );

    return panel() //
      .setFlowLayoutCenter() //
      .add(new JLabel("ค้นหา")) //
      .add(searchField) //
      .edged(5, 0, 0, 0);
  }

  private Connection connection = XConnect.getConnection();

  private void showData(String search) {
    try {
      String sql = "SELECT * FROM " + sqlTableName;
      if (search != null) {
        sql += sqlSearch(search, sqlColumnId);
      }

      ResultSet rs = connection.createStatement().executeQuery(sql);

      Vector<Vector<Object>> data = new Vector<Vector<Object>>();

      while (rs.next()) {
        Vector<Object> vector = new Vector<Object>();
        for (int i = 1; i <= sqlColumnId.length; i++) {
          vector.add(rs.getObject(i));
        }
        data.add(vector);
      }

      table.setModel(new DefaultTableModel(data, tableColumnNames));
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private String sqlSearch(String search, String[] cols) {
    String sql = "";
    boolean first = true;

    for (String string : cols) {
      if (first) {
        first = false;
        sql += " WHERE ";
      } else {
        sql += " OR ";
      }
      sql += string + " LIKE '%" + search + "%'";
    }
    return sql;
  }

  private void reset() {
    showData(null);
    details.get(0).setEditable(true);
    details.forEach(e -> e.setText(""));
    searchField.setText("");
  }

  private void insert() {
    try {
      String sql = "INSERT INTO " + sqlTableName + " VALUES (?,?,?,?,?)";
      PreparedStatement pre = connection.prepareStatement(sql);

      for (int i = 1; i <= sqlColumnId.length; i++) {
        pre.setString(i, details.get(i - 1).getText().trim());
      }
      if (pre.executeUpdate() != -1) {
        message("ผลการบันทึกรายการ", "บันทึกข้อมูลลูกค้าเรียบร้อยแล้ว");
        reset();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void update() {
    try {
      if (table.getSelectedRow() == -1) return;

      String sql = "UPDATE " + sqlTableName + " SET ";
      for (int i = 1; i <= sqlColumnId.length - 2; i++) {
        sql += " " + sqlColumnId[i % sqlColumnId.length] + "=?, ";
      }
      sql +=
        "  " +
        sqlColumnId[sqlColumnId.length - 1] +
        "=? " + //
        " WHERE  " +
        sqlColumnId[0] +
        "=? ";

      PreparedStatement pre = connection.prepareStatement(sql);

      for (int i = 1; i <= sqlColumnId.length; i++) {
        pre.setString(i, details.get(i % sqlColumnId.length).getText().trim());
      }

      if (pre.executeUpdate() != -1) {
        message("ผลการแก้ไขรายการ", "แก้ไขรายการแล้ว");
        reset();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void delete() {
    try {
      if (table.getSelectedRow() == -1) return;

      String sql =
        "DELETE FROM " +
        sqlTableName +
        " " + //
        " WHERE CUST_NUM=? ";

      PreparedStatement pre = connection.prepareStatement(sql);
      pre.setString(1, details.get(0).getText().trim());

      if (pre.executeUpdate() != -1) {
        message("ผลการลบรายการ", "ลบรายการแล้ว");
        reset();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
